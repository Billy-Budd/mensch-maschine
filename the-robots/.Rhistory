Boston <- read.csv("~/GitHub/mensch-maschine/pocket-calculator/Boston.csv")
View(Boston)
sum(Boston.rm)
x <- Boston.rm
x <- Boston$rm
y <- Boston$medv
df <- read.csv("weatherAUS.csv", header = TRUE)
df <- na.omit(df) # remove missing data
set.seed(1234)
split <- sample(1:nrow(df), nrow(df)*.8, replace=FALSE) # split the data into 80/20 samples
train <- df[ split, ] # set train as the  80 split
test <- df[ -split, ] # set test as the 20 split
# I used MinTemp here to show observations, but any column header would be acceptable
tmp <- c("Number of observations in train:", length(train$MinTemp),
"Number of observations in test:", length(test$MinTemp),
"Date of data collection start: ", min(df$Date),
"Date of data collection end: ", max(df$Date))
cat(tmp, sep = '\n')
head(train)
tail(train)
summary(train)
str(train)
windGustDirFreq <- table(train$WindGustDir)
locationFreq <- table(train$Location)
par(mfrow=c(1,2)) # output side by side
piepercent1 <- round(100 * windGustDirFreq / sum(windGustDirFreq), 1) # get percents for graph 1
pie(windGustDirFreq, labels = piepercent1, main = "Wind Direction Frequency", col = rainbow(length(windGustDirFreq))) # percent graph 1
pie(windGustDirFreq, main = "Wind Direction Frequency", col = rainbow(length(windGustDirFreq))) # labeled graph 1
par(mfrow=c(1,2)) # output side by side
piepercent2 <- round(100 * locationFreq / sum(locationFreq), 1) # get percents for graph 2
pie(locationFreq, labels = piepercent2, main = "Location Frequency", col = rainbow(length(locationFreq))) # percent graph 2
pie(locationFreq, main = "Location Frequency", col = rainbow(length(locationFreq))) # percent graph 2
tempTable <- prop.table(table(train$RainToday,train$RainTomorrow), margin = 1) # create a table for bar plot
barplot(tempTable, main = "Probability of Rain Tomorrow Given Rain Today", xlab = "Rain Today", ylab = "Probability of Rain Tomorrow", legend.text = rownames(tempTable), col = rainbow(length(tempTable))) # create bar plot
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
#glm1 <- glm(RainToday ~ ., data = train, family = "binomial") # create logistic regression model
#summary(glm1)
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainToday ~ RainTomorrow, data = train, family = "binomial") # create logistic regression model
summary(glm1)
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainToday ~ RainTomorrow, data = train, family = "binomial") # create logistic regression model
summary(glm1)
plot(glm1)
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainToday ~ RainTomorrow, data = train, family = "binomial") # create logistic regression model
summary(glm1)
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainTomorrow ~ RainToday, data = train, family = "binomial") # create logistic regression model
summary(glm1)
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainTomorrow ~ RainToday, data = train, family = "binomial", maxit = 400) # create logistic regression model
summary(glm1)
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainToday ~ RainTomorrow, data = train, family = "binomial", maxit = 400) # create logistic regression model
summary(glm1)
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainToday ~ RainTomorrow, data = train, family = "binomial", maxit = 400) # create logistic regression model
summary(glm1)
df <- read.csv("weatherAUS.csv", header = TRUE)
df <- na.omit(df) # remove missing data
set.seed(1234)
split <- sample(1:nrow(df), nrow(df)*.8, replace=FALSE) # split the data into 80/20 samples
train <- df[ split, ] # set train as the  80 split
test <- df[ -split, ] # set test as the 20 split
# I used MinTemp here to show observations, but any column header would be acceptable
tmp <- c("Number of observations in train:", length(train$MinTemp),
"Number of observations in test:", length(test$MinTemp),
"Date of data collection start: ", min(df$Date),
"Date of data collection end: ", max(df$Date))
cat(tmp, sep = '\n')
head(train)
tail(train)
summary(train)
str(train)
windGustDirFreq <- table(train$WindGustDir)
locationFreq <- table(train$Location)
par(mfrow=c(1,2)) # output side by side
piepercent1 <- round(100 * windGustDirFreq / sum(windGustDirFreq), 1) # get percents for graph 1
pie(windGustDirFreq, labels = piepercent1, main = "Wind Direction Frequency", col = rainbow(length(windGustDirFreq))) # percent graph 1
pie(windGustDirFreq, main = "Wind Direction Frequency", col = rainbow(length(windGustDirFreq))) # labeled graph 1
par(mfrow=c(1,2)) # output side by side
piepercent2 <- round(100 * locationFreq / sum(locationFreq), 1) # get percents for graph 2
pie(locationFreq, labels = piepercent2, main = "Location Frequency", col = rainbow(length(locationFreq))) # percent graph 2
pie(locationFreq, main = "Location Frequency", col = rainbow(length(locationFreq))) # percent graph 2
tempTable <- prop.table(table(train$RainToday,train$RainTomorrow), margin = 1) # create a table for bar plot
barplot(tempTable, main = "Probability of Rain Tomorrow Given Rain Today", xlab = "Rain Today", ylab = "Probability of Rain Tomorrow", legend.text = rownames(tempTable), col = rainbow(length(tempTable))) # create bar plot
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainToday ~ RainTomorrow, data = train, family = "binomial") # create logistic regression model
summary(glm1)
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainTomorrow ~ RainToday, data = train, family = "binomial") # create logistic regression model
summary(glm1)
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainTomorrow ~ RainToday, data = train, family = "binomial", maxit = 400) # create logistic regression model
summary(glm1)
df <- read.csv("weatherAUS.csv", header = TRUE)
df <- na.omit(df) # remove missing data
set.seed(1234)
split <- sample(1:nrow(df), nrow(df)*.8, replace=FALSE) # split the data into 80/20 samples
train <- df[ split, ] # set train as the  80 split
test <- df[ -split, ] # set test as the 20 split
# I used MinTemp here to show observations, but any column header would be acceptable
tmp <- c("Number of observations in train:", length(train$MinTemp),
"Number of observations in test:", length(test$MinTemp),
"Date of data collection start: ", min(df$Date),
"Date of data collection end: ", max(df$Date))
cat(tmp, sep = '\n')
head(train)
tail(train)
summary(train)
str(train)
windGustDirFreq <- table(train$WindGustDir)
locationFreq <- table(train$Location)
par(mfrow=c(1,2)) # output side by side
piepercent1 <- round(100 * windGustDirFreq / sum(windGustDirFreq), 1) # get percents for graph 1
pie(windGustDirFreq, labels = piepercent1, main = "Wind Direction Frequency", col = rainbow(length(windGustDirFreq))) # percent graph 1
pie(windGustDirFreq, main = "Wind Direction Frequency", col = rainbow(length(windGustDirFreq))) # labeled graph 1
par(mfrow=c(1,2)) # output side by side
piepercent2 <- round(100 * locationFreq / sum(locationFreq), 1) # get percents for graph 2
pie(locationFreq, labels = piepercent2, main = "Location Frequency", col = rainbow(length(locationFreq))) # percent graph 2
pie(locationFreq, main = "Location Frequency", col = rainbow(length(locationFreq))) # percent graph 2
tempTable <- prop.table(table(train$RainToday,train$RainTomorrow), margin = 1) # create a table for bar plot
barplot(tempTable, main = "Probability of Rain Tomorrow Given Rain Today", xlab = "Rain Today", ylab = "Probability of Rain Tomorrow", legend.text = rownames(tempTable), col = rainbow(length(tempTable))) # create bar plot
train$RainToday <- ifelse(train$RainToday=="Yes",1,0)
train$RainTomorrow <- ifelse(train$RainTomorrow=="Yes",1,0)
glm1 <- glm(RainTomorrow ~ RainToday, data = train, family = "binomial", maxit = 400) # create logistic regression model
summary(glm1)
library(e1071)
library(e1071)
install.packages("e1071")
library(e1071)
nb1 <- naiveBayes(RainTomorrow~., data = train)
library(e1071)
nb1 <- naiveBayes(RainTomorrow~., data = train)
nb1
library(e1071)
nb1 <- naiveBayes(RainTomorrow~.- Date, data = train)
nb1
library(e1071)
nb1 <- naiveBayes(RainTomorrow~RainToday, data = train)
nb1
str(df)
library(e1071)
nb1 <- naiveBayes(RainTomorrow~.-Date -WindGustDir, data = train)
nb1
test$RainToday <- ifelse(test$RainToday=="Yes",1,0)
test$RainTomorrow <- ifelse(test$RainTomorrow=="Yes",1,0)
probability <- predict(glm1, newdata = test, type = "response")
library(e1071)
nb1 <- naiveBayes(RainTomorrow~.-Date -WindGustDir -WindDir9am -windDir3pm, data = train)
library(e1071)
nb1 <- naiveBayes(RainTomorrow~.-Date -WindGustDir -WindDir9am -WindDir3pm, data = train)
nb1
test$RainToday <- ifelse(test$RainToday=="Yes",1,0)
test$RainTomorrow <- ifelse(test$RainTomorrow=="Yes",1,0)
pred1 <- predict(glm1, newdata = test, type = "response")
pred2 <- as.numeric(pred1)
pred2 <- pred2 -1
test$RainToday <- ifelse(test$RainToday=="Yes",1,0)
test$RainTomorrow <- ifelse(test$RainTomorrow=="Yes",1,0)
pred1 <- predict(glm1, newdata = test, type = "response")
pred2 <- as.numeric(pred1)
pred2 <- 1 - pred2
test$RainToday <- ifelse(test$RainToday=="Yes",1,0)
test$RainTomorrow <- ifelse(test$RainTomorrow=="Yes",1,0)
pred1 <- predict(glm1, newdata = test, type = "response")
acc1 <- mean(pred1)
test$RainToday <- ifelse(test$RainToday=="Yes",1,0)
test$RainTomorrow <- ifelse(test$RainTomorrow=="Yes",1,0)
pred1 <- predict(glm1, newdata = test, type = "response")
acc1 <- mean(pred1)
print(paste("Logistic Accuracy: ", acc1))
install.packages("caret")
test$RainToday <- ifelse(test$RainToday=="Yes",1,0)
test$RainTomorrow <- ifelse(test$RainTomorrow=="Yes",1,0)
pred1 <- predict(glm1, newdata = test, type = "response")
acc1 <- mean(pred1)
print(paste("Logistic Accuracy: ", acc1))
library(caret)
nbpred1 <- predict(nb1, newdata=test, type="class")
test$RainToday <- ifelse(test$RainToday=="Yes",1,0)
test$RainTomorrow <- ifelse(test$RainTomorrow=="Yes",1,0)
pred1 <- predict(glm1, newdata = test, type = "response")
acc1 <- mean(pred1)
print(paste("Logistic Accuracy: ", acc1))
library(caret)
nbpred1 <- predict(nb1, newdata=test, type="class")
confMatr <-table(nbpred1, test$RainTomorrow)
sensitivity(confMatr)
test$RainToday <- ifelse(test$RainToday=="Yes",1,0)
test$RainTomorrow <- ifelse(test$RainTomorrow=="Yes",1,0)
pred1 <- predict(glm1, newdata = test, type = "response")
acc1 <- mean(pred1)
print(paste("Logistic Accuracy: ", acc1))
library(cluster)
install.packages("devtools")
library(devtools)
install_version("rlang", version = "1.1.0", repos = "http://cran.us.r-project.org")
if(!require(factoextra)) install.packages("factoextra")
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
perth <- read.csv("perth.csv")
perthScale <- scale(perth[3:5])
set.seed(1234)
kMeansResult <- kmeans(perthScale, centers = 4, nstart = 20)
summary(kMeansResult)
kMeansResult
((kMeansResult$totss - kMeansResult$tot.withinss) / kMeansResult$totss) * 100
library(cluster)
install.packages("devtools")
library(devtools)
install_version("rlang", version = "1.1.0", repos = "http://cran.us.r-project.org")
if(!require(factoextra)) install.packages("factoextra")
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
library(cluster)
install.packages("devtools")
library(devtools)
install_version("rlang", version = "1.1.0", repos = "http://cran.us.r-project.org")
